00:00 Hello, everyone. Welcome to the Git screencast.

This issue is an introductory video for those who haven't used Git yet.

00:12 Most likely you have already heard that Git is a Version Control System.
In other words - its storage, a database of a project development history, that contains all the versions of its files,
from the oldest to the most recent.

00:27 First, we add the initial version of our files.
And then, when we change anything in any of the added files, we add the changed version to Git, so Git keeps track of the file's versions.

00:36 The best part of this is that we can always peek and see whats inside. Then we can restore the files to any previous version.

00:45 Another useful feature is that we can also share our data with other developers.

00:52 For instance we have a team of Alice, Jeff and Bob. Each one of them has Git installed.
Each one of them is working on their part of the project. Once any of them is done with their part, they can easilly share their changes with their colleagues as if they had just copied their files over.

01:06 But Git is so much better than copying the files, as it can automatically detect collisions and merge the changes together. So if 2 developers have changed the same file, Git will detect the conflict early so it can be resolved.

01:19 In most cases Git will even resolve the conflict automatically.
Git is a Distributed Version Control System because it doesn't need a central server. Each developer has his or her local copy of Git repository that keeps track of the history of the project.

01:35 Once a developer changes the file, they record these changes in their own, local Git repository.
Later, the developer can catch up by getting their colleagues' latest changes and sharing their own changes.


01:45 Albeit, most of the time there is a central repository for convenience.
One can upload his or her latest changes to and get the latest version from this central repository or server.
So the server is just a well-known node that is used to synchronize the changes in a convenient manner.

02:00 Most things are still done locally. So you can go to another country with bad or no connection to the server and still be able to make your changes to the project, check the history and see all the previous changes of the other team members, and add new files or restore the previous version of any of the files. Once you are back to civilization, you can synchronize with the server, getting the latest changes of your peers and checking what they've been up to.

02:21 Last, but not least, Git is a reliable system. Let's assume the following scenario: We have some files on our disk, and something went wrong. The disk was damaged somehow and the files got corrupted. If we have tons of files, we might not even notice anything at first.

02:36 But Git doesnt simply have a copy of our files. It has a checksum for everything. And since Git is also a distributed system and every deveoper has a copy of all the changes of every other developer, we have a very reliable backup of everything out of the box, automagically! If I have damaged my files somehow I'll be able to easilly recover them from my colleagues copy or by just synchronizing with the server.

03:00 Git can also help you against malicious programms that are intentionally trying to damage your data, like cryptolockers or viruses. Even if you've been hacked and the hacker made some tricky changes to your files, local checksum will keep track of that, so these changes can't pass through unnoticed. One can't just change files without being noticed, as checksum will not allow it. And one can't easily change the checksum, as checksums are dependent on each other and one will have too much to change. In this scenario, once you try to synchronize with your peers, you'll end up with a synchronization conflict. So we'll detect these changes and will be able to track the malicious changes.

03:32 To put it simply: One can trust Git!

03:37 Apart of that there are a number of other Git features and useful internet services. You'll learn all of it with time, but let's start with installing Git first.
